@page "/"
@using BlazorServer_For_Websocket_WithAPI.Models;
@using Microsoft.AspNetCore.SignalR.Client;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<div>
    SignalR State : @IsConnected
    Status Update On : @updateOn
</div>


<h3> Incoming Message </h3>
@foreach (var str in stringlist)
{
    <span>@str</span>
}

<br />

<h3> Incoming Items </h3>
<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Notes</th>
            <th>Price</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var item in itemslist)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@item.Notes</td>
                <td>@item.Price</td>
            </tr>
        }
    </tbody>
</table>

@code{
    private HubConnection? hubConnection;
    public List<Items> itemslist;
    public List<string> stringlist = new List<string>();
    public string updateOn;

    protected override async Task OnInitializedAsync()
    {
        itemslist = new List<Items>();
        hubConnection = new HubConnectionBuilder()
        .WithUrl("http://localhost:44344/signalhub")
        .Build();

        hubConnection.On<Items>("ReceiveItems", (incomingitem) =>
        {
            itemslist.Add(incomingitem);
            updateOn = DateTime.Now.ToLongTimeString();
            StateHasChanged();

        });

        hubConnection.On<string>("ReceiveMessage", (incomingMessage) =>
        {
            stringlist.Add(incomingMessage);
            updateOn = DateTime.Now.ToLongTimeString();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        
    }
    public bool IsConnected =>
           hubConnection?.State == HubConnectionState.Connected;


}


